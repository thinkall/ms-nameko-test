apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: movie-platform
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: fabric8-s2i-java
  spec:
    dockerImageRepository: fabric8/s2i-java
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: fabric8/s2i-java:1.3.6
      generation: 2
      importPolicy: {}
      name: 1.3.6
    - annotations:
        description: Build and run Fuse Java applications
        iconClass: icon-fuse-java
        sampleRepo: https://github.com/rhuss/sti-camel-cdi
        supports: java:8,java
        tags: builder,java,spring-boot,fuse,kermit
      from:
        kind: DockerImage
        name: fabric8/s2i-java:latest
      generation: 2
      importPolicy: {}
      name: latest
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    labels:
      app: ${APPLICATION_NAME}
      microservice: catalog
    name: catalog
    spec:
      dockerImageRepository: {}
    tags:
      name: latest
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer
    name: customer
    spec:
      dockerImageRepository: {}
    tags:
      name: latest
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer-backend
    name: customer-backend
    spec:
      dockerImageRepository: {}
    tags:
      name: latest
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    labels:
      app: ${APPLICATION_NAME}
      microservice: recommandation
    name: recommandation
    spec:
      dockerImageRepository: {}
    tags:
      name: latest

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: catalog
    name: catalog
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: catalog:latest
    postCommit: {}
    resources: {}
    source:
      git:
        ref: ${REPOSITORY_BRANCH}
        uri: ${SOURCE_REPOSITORY_URL}
      secrets: null
      sourceSecret:
        name: ${GIT_SECRET_NAME}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: MAVEN_ARGS_APPEND
            value: -pl catalog --also-make
          - name: ARTIFACT_DIR
            value: catalog/target/
        from:
          kind: ImageStreamTag
          name: fabric8-s2i-java:latest
        incremental: true
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer
    name: customer
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: customer:latest
    postCommit: {}
    resources: {}
    source:
      git:
        ref: ${REPOSITORY_BRANCH}
        uri: ${SOURCE_REPOSITORY_URL}
      secrets: null
      sourceSecret:
        name: ${GIT_SECRET_NAME}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: MAVEN_ARGS_APPEND
            value: -pl customer --also-make
          - name: ARTIFACT_DIR
            value: customer/target/
        from:
          kind: ImageStreamTag
          name: fabric8-s2i-java:latest
        incremental: true
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer-backend
    name: customer-backend
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: customer-backend:latest
    postCommit: {}
    resources: {}
    source:
      git:
        ref: ${REPOSITORY_BRANCH}
        uri: ${SOURCE_REPOSITORY_URL}
      secrets: null
      sourceSecret:
        name: ${GIT_SECRET_NAME}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: MAVEN_ARGS_APPEND
            value: -pl customer-backend --also-make
          - name: ARTIFACT_DIR
            value: customer-backend/target/
        from:
          kind: ImageStreamTag
          name: fabric8-s2i-java:latest
        incremental: true
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: recommandation
    name: recommandation
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: recommandation:latest
    postCommit: {}
    resources: {}
    source:
      git:
        ref: ${REPOSITORY_BRANCH}
        uri: ${SOURCE_REPOSITORY_URL}
      secrets: null
      sourceSecret:
        name: ${GIT_SECRET_NAME}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: MAVEN_ARGS_APPEND
            value: -pl recommandation --also-make
          - name: ARTIFACT_DIR
            value: recommandation/target/
        from:
          kind: ImageStreamTag
          name: fabric8-s2i-java:latest
        incremental: true
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION_NAME}
      microservice: catalog
    name: catalog
  spec:
    replicas: 1
    selector:
      deploymentconfig: catalog
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          microservice: catalog
          deploymentconfig: catalog
      spec:
        containers:
        - env:
          - name: SPRING_PROFILES_ACTIVE
            value: prod,kermit
          - name: JAVA_OPTIONS
            value: -Xms750m -Xmx750m
          livenessProbe:
            tcpSocket:
              port: 8778
            initialDelaySeconds: 25
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3			
          image: catalog
          imagePullPolicy: Always
          name: catalog
          ports:
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - catalog
        from:
          kind: ImageStreamTag
          name: catalog:latest
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer
    name: customer
  spec:
    replicas: 1
    selector:
      deploymentconfig: customer
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          microservice: customer
          deploymentconfig: customer
      spec:
        containers:
        - env:
          - name: SPRING_PROFILES_ACTIVE
            value: prod,kermit
          - name: JAVA_OPTIONS
            value: -Xms750m -Xmx750m
          livenessProbe:
            tcpSocket:
              port: 8778
            initialDelaySeconds: 25
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3			
          image: customer
          imagePullPolicy: Always
          name: customer
          ports:
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - customer
        from:
          kind: ImageStreamTag
          name: customer:latest
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer-backend
    name: customer-backend
  spec:
    replicas: 1
    selector:
      deploymentconfig: customer-backend
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          microservice: customer-backend
          deploymentconfig: customer-backend
      spec:
        containers:
        - env:
          - name: SPRING_PROFILES_ACTIVE
            value: prod,kermit
          - name: JAVA_OPTIONS
            value: -Xms750m -Xmx750m
          livenessProbe:
            tcpSocket:
              port: 8778
            initialDelaySeconds: 25
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3			
          image: customer-backend
          imagePullPolicy: Always
          name: customer-backend
          ports:
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - customer-backend
        from:
          kind: ImageStreamTag
          name: customer-backend:latest
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION_NAME}
      microservice: recommandation
    name: recommandation
  spec:
    replicas: 1
    selector:
      deploymentconfig: recommandation
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          microservice: recommandation
          deploymentconfig: recommandation
      spec:
        containers:
        - env:
          - name: SPRING_PROFILES_ACTIVE
            value: prod,kermit
          - name: JAVA_OPTIONS
            value: -Xms750m -Xmx750m
          livenessProbe:
            tcpSocket:
              port: 8778
            initialDelaySeconds: 25
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3			
          image: recommandation
          imagePullPolicy: Always
          name: recommandation
          ports:
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - recommandation
        from:
          kind: ImageStreamTag
          name: recommandation:latest
      type: ImageChange
    - type: ConfigChange
  status: {}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: catalog
    name: catalog
  spec:
    ports:
    - name: 8778-tcp
      port: 8180
      protocol: TCP
      targetPort: 8180
    selector:
      deploymentconfig: catalog
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer
    name: customer
  spec:
    ports:
    - name: 8778-tcp
      port: 8181
      protocol: TCP
      targetPort: 8181
    selector:
      deploymentconfig: customer
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer-backend
    name: customer-backend
  spec:
    ports:
    - name: 8778-tcp
      port: 8184
      protocol: TCP
      targetPort: 8184
    selector:
      deploymentconfig: customer-backend
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: recommandation
    name: recommandation
  spec:
    ports:
    - name: 8778-tcp
      port: 8182
      protocol: TCP
      targetPort: 8182
    selector:
      deploymentconfig: recommandation
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: catalog
    name: catalog
  spec:
    host: ""
    port:
      targetPort: 8778-tcp
    to:
      kind: Service
      name: catalog
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer
    name: customer
  spec:
    host: ""
    port:
      targetPort: 8778-tcp
    to:
      kind: Service
      name: customer
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: customer-backend
    name: customer-backend
  spec:
    host: ""
    port:
      targetPort: 8778-tcp
    to:
      kind: Service
      name: customer-backend
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      microservice: recommandation
    name: recommandation
  spec:
    host: ""
    port:
      targetPort: 8778-tcp
    to:
      kind: Service
      name: recommandation

parameters:
- description: "The name of your application that is based on the 4 microservices: catalog + customer + customer-backend + recommandation."
  displayName: APPLICATION_NAME
  name: APPLICATION_NAME
  required: true
  value: movie-platform
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  value: https://www.forge.orange-labs.fr/plugins/git/miserwoko/movie-platform.git
- description: The branch of the repository with your application source code.
  displayName: Repository Branch
  name: REPOSITORY_BRANCH
  value: feature/kermit
- description: "Name of the secret used to access the Git repo. This secret must be created by 'oc secrets new-basicauth <GIT_SECRET_NAME> --username=<git-repo-username> --password=<git-repo-password>'. See doc: http://kermit-docker.rd.francetelecom.fr/knowledge-base/working-with-git-repositories/#using-private-repositories"
  displayName: GIT_SECRET_NAME
  name: GIT_SECRET_NAME
  required: true
  value: mysecret

# This template is tested working well in minishift @2020.03.06
apiVersion: v1
kind: Template
metadata:
  name: diod-nameko
  annotations:
    openshift.io/display-name: "Microservices implemented with python+nameko+rabbitmq"
    description: "An example of microservices atop nameko."
    iconClass: "icon-python"
    tags: "python,kermit,diod,microservices"
    openshift.io/provider-display-name: "li.jiang@orange.com"
  message: "Deployed Success!"
labels:
  template: diod-nameko
  app: diod-nameko


parameters: 
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: myproject
- name: APPLICATION_NAME
  value: rabbitmq
- name: APPLICATION_HOSTNAME
  value: rabbitmq.192.168.99.106.nip.io 

objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: rabbitmq
    name: rabbitmq
  spec:
    replicas: 1
    selector:
      app: rabbitmq
      deploymentconfig: rabbitmq
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          app: rabbitmq
          deploymentconfig: rabbitmq
      spec:
        containers:
        - image: rabbitmq 
          imagePullPolicy: IfNotPresent
          name: rabbitmq
          ports:
          - containerPort: 4369
            protocol: TCP
          - containerPort: 5671
            protocol: TCP
          - containerPort: 5672
            protocol: TCP
          - containerPort: 25672
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/rabbitmq
            name: rabbitmq-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: rabbitmq-1
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - rabbitmq
        from:
          kind: ImageStreamTag
          name: rabbitmq:3.8-management
          namespace: ${NAMESPACE}
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
    
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/image.dockerRepositoryCheck: 2020-03-05T12:47:35Z
    creationTimestamp: null
    generation: 2
    labels:
      app: rabbitmq
    name: rabbitmq
  spec:
    lookupPolicy:
      local: yes
    tags:
    - annotations:
        openshift.io/generated-by: OpenShiftWebConsole
        openshift.io/imported-from: rabbitmq:3.8-management
      from:
        kind: DockerImage
        name: rabbitmq:3.8-management
      generation: 2
      importPolicy: {}
      name: 3.8-management
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: rabbitmq
    name: rabbitmq
  spec:
    ports: 
    - name: 5672-tcp
      port: 5672
      protocol: TCP
      targetPort: 5672
    - name: 15672-tcp
      port: 15672
      protocol: TCP
      targetPort: 15672
    selector:
      deploymentconfig: rabbitmq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}


# define route
- apiVersion: v1
  kind: Route
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}" 
    annotations:
      description: "The route exposes the frontend service at a hostname."
  spec:
    host: "${APPLICATION_HOSTNAME}"
    to:
      kind: Service
      name: ${APPLICATION_NAME}
    port:
      targetPort: 15672-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Allow
